# This file provides configurations for tox-based project automation tasks. Generally, this project uses tox similar
# to how some other projects use build-systems.

# Base tox configurations. Note, the 'envlist' will run in the listed order whenever 'tox' is used without an -e
# specifier.
[tox]
requires =
    tox-uv>=1,<2
    tox>=4,<5
envlist =
    install

# This forces tox to create a 'sterile' environment into which the project with all dependencies is installed prior to
# running the requested tasks, isolating the process from the rest of the system. This is almost always the desired
# runtime mode.
isolated_build = True

# You can pass the '--replace-token' flag from the command line to replace the token stored in the .pypirc file.
[testenv:upload]
skip_install = true
description =
    Uses twine to upload all files inside the '/dist' folder to PyPI, ignoring any files that are already uploaded.
    Uses API token stored in '.pypirc' file or provided by user to authenticate the upload.
deps =
    twine>=6,<7
    ataraxis-automation>=4,<5
allowlist_externals =
    distutils
commands =
    automation-cli acquire-pypi-token {posargs:}
    twine upload dist/* --skip-existing --config-file .pypirc

[testenv:install]
skip_install = true
deps =
    ataraxis-automation>=4,<5
depends =
    lint
    stubs
    {py311, py312, py313}-test
    coverage
    docs
description =
    Builds and installs the project into the specified conda environment. If the environment does not exist, creates
    it before installing the project.
commands =
    automation-cli install-project --environment-name suite2p

[testenv:uninstall]
skip_install = true
deps =
    ataraxis-automation>=4,<5
description =
    Uninstalls the project from the specified conda environment. If the environment does not exist
    this task silently succeeds.
commands =
    automation-cli uninstall-project --environment-name suite2p

[testenv:create]
skip_install = true
deps =
    ataraxis-automation>=4,<5
description =
    Creates a minimally-configured conda environment using the requested python version and installs conda- and pip-
    dependencies extracted from pyproject.toml file into the environment. Does not install the project!
commands =
    automation-cli create-env --environment-name suite2p --python-version 3.13

[testenv:remove]
skip_install = true
deps =
    ataraxis-automation>=4,<5
description =
    Removes the requested conda environment, if it is installed locally.
commands =
    automation-cli remove-env --environment-name suite2p

[testenv:provision]
skip_install = true
deps =
    ataraxis-automation>=4,<5
description =
    Provisions an already existing environment by uninstalling all packages from the environment and then installing the
    project dependencies using pyproject.toml specifications.
commands =
    automation-cli provision-env --environment-name suite2p --python-version 3.13

[testenv:export]
skip_install = true
deps =
    ataraxis-automation>=4,<5
description =
    Exports the requested conda environment to the 'envs' folder as a .yml file and as a spec.txt with revision history.
commands =
    automation-cli export-env --environment-name suite2p

[testenv:import]
skip_install = true
deps =
    ataraxis-automation>=4,<5
description =
    Discovers and imports (installs) a new or updates an already existing environment using the .yml file
    stored in the 'envs' directory.
commands =
    automation-cli import-env --environment-name suite2p

[testenv:rename]
skip_install = true
deps =
    ataraxis-automation>=4,<5
description =
    Replaces the base environment name used by all files inside the 'envs' directory with the user-input name.
commands =
    automation-cli rename-environments
